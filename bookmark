#!/usr/bin/env bash

# Copyright (C) 2022 Henrik Abel Christensen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

if ! command -v jq &> /dev/null
then
	echo "could not find jq"
	exit 1
fi

BOOKMARKS_FILE="$HOME/.bookmarks.json"
SCRIPT_NAME=$(basename $0)

list_bookmarks () {
	if [ ! -f $BOOKMARKS_FILE ] || [ $(echo $(<$BOOKMARKS_FILE) | jq length) -eq 0 ]; then
		echo "You have no saved bookmarks"
		exit 0
	fi

	echo $(<$BOOKMARKS_FILE) | jq .
}

search_bookmark () {
	if [ -z "$1" ]; then
		echo "missing argument"
		echo "$SCRIPT_NAME search <bookmark>"
		exit 1
	fi

	if [ ! -f $BOOKMARKS_FILE ]; then
		echo "You have no saved bookmarks"
		exit 1
	fi

	if [[ $(echo $(<$BOOKMARKS_FILE) | jq ".$1") == null ]]; then
		echo "You have no saved bookmark: \"$1\""
		exit 1
	fi

	echo $(<$BOOKMARKS_FILE) | jq -r ".$1"
}

exec_bookmark_command () {
	if [ -z "$1" ]; then
		echo "missing argument"
		echo "$SCRIPT_NAME exec <bookmark>"
		exit 1
	fi

	cmd=$(echo $(<$BOOKMARKS_FILE) | jq -r ".$1")

	if [[ $cmd != $(search_bookmark $1) ]]; then
		echo "You have no saved bookmark: \"$1\""
		exit 1
	fi

	eval $cmd
}

save_bookmark () {
	if [ -z "$1" ] || [ -z "$2" ]; then
		echo "missing arguments"
		echo "$SCRIPT_NAME save <name> <command>"
		exit 1
	fi

	if [ ! -f $BOOKMARKS_FILE ]; then
		echo "{}" > $BOOKMARKS_FILE
	fi

	updated_bookmarks=$(jq --argjson addobj "{\"$1\": \"$2\"}" '. + $addobj' $BOOKMARKS_FILE)

	if [[ $(echo $(<$BOOKMARKS_FILE) | jq ".$1") == null ]]; then
		echo $updated_bookmarks | jq . > $BOOKMARKS_FILE
		echo "Bookmark \"$1\" was saved successfully!"
	else
		read -p "You already have a bookmark \"$1\" - override (y/N)? " INPUT

		if [[ $INPUT != "y" ]] && [[ $INPUT != "Y" ]]; then
			exit 0
		fi

		echo $updated_bookmarks | jq . > $BOOKMARKS_FILE
		echo "\"$1\" has been updated successfully!"
	fi
}

remove_bookmark () {
	if [ -z "$1" ]; then
		echo "missing argument"
		echo "$SCRIPT_NAME remove <bookmark>"
		exit 1
	fi

	cmd=$(echo $(<$BOOKMARKS_FILE) | jq -r ".$1")

	if [[ $cmd != $(search_bookmark $1) ]]; then
		echo "You have no saved bookmark: \"$1\""
		exit 1
	fi

	echo $(jq "del(.$1)" $BOOKMARKS_FILE) > $BOOKMARKS_FILE
}

clear_bookmarks () {
	read -p "Are you sure that you want to clear your bookmarks (y/N)? " INPUT

	if [[ $INPUT != "y" ]] && [[ $INPUT != "Y" ]]; then
		exit 0
	fi

	if [ -f $BOOKMARKS_FILE ]; then
		rm $BOOKMARKS_FILE
	fi

	echo "bookmarks cleared successfully"
}

show_help () {
	echo -e "*** CLI Bookmark ***\n"

	echo -e "Usage: $SCRIPT_NAME <command>\n"

	echo "commands:"
	echo "list 		lists all saved bookmarks"
	echo "search b 	search for bookmark <b>"
	echo "save b c 	saves a bookmark <b> with command <c>"
	echo "exec b		executes the command saved in the bookmark <b>"
	echo "remove b 	removes a bookmark <b>"
	echo "clear 		removes ALL bookmarks"
}

case $1 in
	list)
		list_bookmarks
		;;

	search)
		search_bookmark $2
		;;

	exec)
		exec_bookmark_command $2
		;;

	save)
		save_bookmark $2 "${*:3}"
		;;

	remove)
		remove_bookmark $2
		;;

	clear)
		clear_bookmarks
		;;

	help)
		show_help
		;;

	*)
		show_help
		;;
esac

